@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
@section PageStyles {
    <style>
        #wrapper {
            display: flex;
        }
        #canvas-container {
            position: relative;
            width: 800px;
            height: 600px;
            box-shadow: 0 0 5px 1px black;
            margin: 10px auto;
            border: 5px solid transparent;
        }

        #canvas-container.over {
            border: 5px dashed cyan;
        }

        #images img.img_dragging {
            opacity: 0.4;
        }
        /*
        Styles below based on  http://www.html5rocks.com/en/tutorials/dnd/basics/
        */

        /* Prevent the text contents of draggable elements from being selectable. */
        [draggable] {
            -moz-user-select: none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            user-select: none;
            /* Required to make elements draggable in old WebKit */
            -khtml-user-drag: element;
            -webkit-user-drag: element;
            cursor: move;
        }
    </style>
}

@section Scripts{
    <script type="text/javascript" src="~/lib/jquery/dist/jquery.js"></script>
    <script type="text/javascript" src="~/js/fabric.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
    <script type="text/javascript" src="js/signalr.js"></script>
    <script type="text/javascript">
        (function () {
            var connection = new signalR.HubConnectionBuilder().withUrl("/drawHub").build();

            connection.start().catch(function (err) {
                return console.error(err.toString());
            });



            var $ = function(id) { return document.getElementById(id) };

            var canvas = this.__canvas = new fabric.Canvas('whiteboardCanvas',
                {
                    isDrawingMode: true,
                });

            fabric.Object.prototype.transparentCorners = false;

            var drawingModeEl = $('drawing-mode'),
                drawingOptionsEl = $('drawing-mode-options'),
                drawingColorEl = $('drawing-color'),
                drawingShadowColorEl = $('drawing-shadow-color'),
                drawingLineWidthEl = $('drawing-line-width'),
                drawingShadowWidth = $('drawing-shadow-width'),
                drawingShadowOffset = $('drawing-shadow-offset'),
                clearEl = $('clear-canvas');

            clearEl.onclick = function() { canvas.clear() };

            drawingModeEl.onclick = function() {
                canvas.isDrawingMode = !canvas.isDrawingMode;
                if (canvas.isDrawingMode) {
                    drawingModeEl.innerHTML = 'Cancel drawing mode';
                    drawingOptionsEl.style.display = '';
                } else {
                    drawingModeEl.innerHTML = 'Enter drawing mode';
                    drawingOptionsEl.style.display = 'none';
                }
            };

            if (fabric.PatternBrush) {
                var vLinePatternBrush = new fabric.PatternBrush(canvas);
                vLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(0, 5);
                    ctx.lineTo(10, 5);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var hLinePatternBrush = new fabric.PatternBrush(canvas);
                hLinePatternBrush.getPatternSrc = function() {

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = 10;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.strokeStyle = this.color;
                    ctx.lineWidth = 5;
                    ctx.beginPath();
                    ctx.moveTo(5, 0);
                    ctx.lineTo(5, 10);
                    ctx.closePath();
                    ctx.stroke();

                    return patternCanvas;
                };

                var squarePatternBrush = new fabric.PatternBrush(canvas);
                squarePatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 2;

                    var patternCanvas = fabric.document.createElement('canvas');
                    patternCanvas.width = patternCanvas.height = squareWidth + squareDistance;
                    var ctx = patternCanvas.getContext('2d');

                    ctx.fillStyle = this.color;
                    ctx.fillRect(0, 0, squareWidth, squareWidth);

                    return patternCanvas;
                };

                var diamondPatternBrush = new fabric.PatternBrush(canvas);
                diamondPatternBrush.getPatternSrc = function() {

                    var squareWidth = 10, squareDistance = 5;
                    var patternCanvas = fabric.document.createElement('canvas');
                    var rect = new fabric.Rect({
                        width: squareWidth,
                        height: squareWidth,
                        angle: 45,
                        fill: this.color
                    });

                    var canvasWidth = rect.getBoundingRect().width;

                    patternCanvas.width = patternCanvas.height = canvasWidth + squareDistance;
                    rect.set({ left: canvasWidth / 2, top: canvasWidth / 2 });

                    var ctx = patternCanvas.getContext('2d');
                    rect.render(ctx);

                    return patternCanvas;
                };

                var texturePatternBrush = new fabric.PatternBrush(canvas);;
            }

            $('drawing-mode-selector').onchange = function() {

                if (this.value === 'hline') {
                    canvas.freeDrawingBrush = vLinePatternBrush;
                } else if (this.value === 'vline') {
                    canvas.freeDrawingBrush = hLinePatternBrush;
                } else if (this.value === 'square') {
                    canvas.freeDrawingBrush = squarePatternBrush;
                } else if (this.value === 'diamond') {
                    canvas.freeDrawingBrush = diamondPatternBrush;
                } else if (this.value === 'texture') {
                    canvas.freeDrawingBrush = texturePatternBrush;
                } else {
                    canvas.freeDrawingBrush = new fabric[this.value + 'Brush'](canvas);
                }

                if (canvas.freeDrawingBrush) {
                    canvas.freeDrawingBrush.color = drawingColorEl.value;
                    canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                    canvas.freeDrawingBrush.shadow = new fabric.Shadow({
                        blur: parseInt(drawingShadowWidth.value, 10) || 0,
                        offsetX: 0,
                        offsetY: 0,
                        affectStroke: true,
                        color: drawingShadowColorEl.value,
                    });
                }
            };

            drawingColorEl.onchange = function() {
                canvas.freeDrawingBrush.color = this.value;
            };
            drawingShadowColorEl.onchange = function() {
                canvas.freeDrawingBrush.shadow.color = this.value;
            };
            drawingLineWidthEl.onchange = function() {
                canvas.freeDrawingBrush.width = parseInt(this.value, 10) || 1;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowWidth.onchange = function() {
                canvas.freeDrawingBrush.shadow.blur = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };
            drawingShadowOffset.onchange = function() {
                canvas.freeDrawingBrush.shadow.offsetX = parseInt(this.value, 10) || 0;
                canvas.freeDrawingBrush.shadow.offsetY = parseInt(this.value, 10) || 0;
                this.previousSibling.innerHTML = this.value;
            };

            if (canvas.freeDrawingBrush) {
                canvas.freeDrawingBrush.color = drawingColorEl.value;
                canvas.freeDrawingBrush.width = parseInt(drawingLineWidthEl.value, 10) || 1;
                canvas.freeDrawingBrush.shadow = new fabric.Shadow({
                    blur: parseInt(drawingShadowWidth.value, 10) || 0,
                    offsetX: 0,
                    offsetY: 0,
                    affectStroke: true,
                    color: drawingShadowColorEl.value,
                });
            }

            if (Modernizr.draganddrop) {
                // Browser supports HTML5 DnD.

                // Bind the event listeners for the image elements
                var images = document.querySelectorAll('#images img');
                [].forEach.call(images,
                    function(img) {
                        img.addEventListener('dragstart', handleDragStart, false);
                        img.addEventListener('dragend', handleDragEnd, false);
                    });
                // Bind the event listeners for the canvas
                var canvasContainer = document.getElementById('canvas-container');
                canvasContainer.addEventListener('dragenter', handleDragEnter, false);
                canvasContainer.addEventListener('dragover', handleDragOver, false);
                canvasContainer.addEventListener('dragleave', handleDragLeave, false);
                canvasContainer.addEventListener('drop', handleDrop, false);
            } else {
                // Replace with a fallback to a library solution.
                alert("This browser doesn't support the HTML5 Drag and Drop API.");
            }


            function handleDragStart(e) {
                [].forEach.call(images,
                    function(img) {
                        img.classList.remove('img_dragging');
                    });
                this.classList.add('img_dragging');
            }

            function handleDragOver(e) {
                if (e.preventDefault) {
                    e.preventDefault(); // Necessary. Allows us to drop.
                }

                e.dataTransfer.dropEffect = 'copy'; // See the section on the DataTransfer object.
                // NOTE: comment above refers to the article (see top) -natchiketa

                return false;
            }

            function handleDragEnter(e) {
                // this / e.target is the current hover target.
                this.classList.add('over');
            }

            function handleDragLeave(e) {
                this.classList.remove('over'); // this / e.target is previous target element.
            }

            function handleDrop(e) { //TODO: testen in firefox, mogelijk moet er een: e.preventDefault(); aan het begin
                // this / e.target is current target element.
                e.preventDefault();
                if (e.stopPropagation) {
                    e.stopPropagation(); // stops the browser from redirecting.
                }

                var img = document.querySelector('#images img.img_dragging');
                
                var newImage = new fabric.Image(img,
                    {
                        scaleX: img.width / img.naturalWidth,
                        scaleY: img.height / img.naturalHeight,
                        // Set the center of the new object based on the event coordinates relative
                        // to the canvas container.
                        left: e.layerX,
                        top: e.layerY
                    });
                canvas.add(newImage);

                return false;
            }

            function handleDragEnd(e) {
                // this/e.target is the source node.
                [].forEach.call(images,
                    function(img) {
                        img.classList.remove('img_dragging');
                    });
            }
            
            canvas.on("drop",
                function () {
                    connection.invoke("SendUpdate", "drop", JSON.stringify(canvas)).catch(function (err) {
                        return console.error(err.toString());
                    });
                });
           
            canvas.on("object:modified",
                function () {
                    connection.invoke("SendUpdate", "object:modified", JSON.stringify(canvas)).catch(function (err) {
                        return console.error(err.toString());
                    });
                });
            canvas.on("path:created",
                function () {
                    connection.invoke("SendUpdate", "path:created", JSON.stringify(canvas)).catch(function (err) {
                        return console.error(err.toString());
                    });
                });
        })();
        

    </script>

}
<h2>HIERONDER STAAT EEN CANVAS</h2>
<div id="wrapper">
    <div id="images">
        <img draggable="true" src="http://i.imgur.com/8rmMZI3.jpg" width="100" height="100"></img>
        <img draggable="true" src="http://i.imgur.com/q9aLMza.png" width="100" height="100"></img>
        <img draggable="true" src="http://i.imgur.com/wMU4SFn.jpg" width="100" height="100"></img>
    </div>
    <div id="canvas-container">
        <canvas id="whiteboardCanvas" width="800" height="600"></canvas>
    </div>
    <div style="display: inline-block; margin-left: 10px">
        <button id="drawing-mode" class="btn btn-info">Cancel drawing mode</button><br>
        <button id="clear-canvas" class="btn btn-info">Clear</button><br>

        <div id="drawing-mode-options" style="">
            <label for="drawing-mode-selector">Mode:</label>
            <select id="drawing-mode-selector">
                <option>Pencil</option>
                <option>Circle</option>
                <option>Spray</option>
                <option>Pattern</option>

                <option>hline</option>
                <option>vline</option>
                <option>square</option>
                <option>diamond</option>
                <option>texture</option>
            </select><br>

            <label for="drawing-line-width">Line width:</label>
            <span class="info">5</span><input type="range" value="5" min="0" max="150" id="drawing-line-width"><br>

            <label for="drawing-color">Line color:</label>
            <input type="color" value="#005E7A" id="drawing-color"><br>

            <label for="drawing-shadow-color">Shadow color:</label>
            <input type="color" value="#005E7A" id="drawing-shadow-color"><br>

            <label for="drawing-shadow-width">Shadow width:</label>
            <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-width"><br>

            <label for="drawing-shadow-offset">Shadow offset:</label>
            <span class="info">0</span><input type="range" value="0" min="0" max="50" id="drawing-shadow-offset"><br>
        </div>
    </div>
</div>
